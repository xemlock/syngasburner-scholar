<?php

function scholar_page_list() // {{{
{
    // pojedynczy element w podmenu z typem MENU_DEFAULT_LOCAL_TASK
    // nie tworzy tabow. Menu dla stron zlozone jest z pojedynczego
    // elementu MENU_LOCAL_TASK, i rowniez nie ma zadnych tabow.
    // Dodajemy wiec, by strona wygladala podobnie do innych list.
    scholar_add_tab(t('list'), scholar_admin_path('page'));

    // poniewaz element menu odpowiadajacy tej stronie ma typ
    // MENU_LOCAL_TASK, jego bezposredni tytul nie jest brany pod uwage,
    // uzywany jest tytul jego rodzica. Stos wywolan ustawiajacych tytul:
    //    menu_get_active_title (menu.inc)
    //    drupal_get_title (path.inc)
    //    template_preprocess_page (theme.inc)
    // Dlatego tytul musi byc ustawiony recznie
    drupal_set_title(t('Pages'));

    $header = array(
        array('data' => t('Title')),
        array('data' => t('Published')),
        array('data' => t('Operations')),
    );

    // pobierz kody aktywnych jezykow i zbuduj zbior do uzycia w zapytaniu SQL
    $languages = array_keys(scholar_languages());
    $languages_sql = count($languages)
        ? '(' . implode(',', array_map('scholar_db_quote', $languages)) . ')'
        : '(NULL)';

    // pobierz liste stron wraz z informacja o liczbie opublikowanych wersji
    // jezykowych w aktywnych jezykach
    $query = db_query("SELECT p.id, p.title, SUM(CASE WHEN n.status <> 0 AND n.language IN $languages_sql THEN 1 ELSE 0 END) AS published FROM {scholar_pages} p LEFT JOIN {scholar_nodes} n ON n.table_name = 'pages' AND p.id = n.row_id AND p.id = %d GROUP BY p.id, p.title", $row['id']);
    $rows  = array();

    while ($row = db_fetch_array($query)) {
        
    }
    asort($countries, SORT_LOCALE_STRING);

    while ($row = db_fetch_array($query)) {
        $rows[] = array(
            t($row['title']),
            $row['published'],
            l(t('edit'), scholar_admin_path('page/edit/' . $row['id'])),
        );
    }

    if (empty($rows)) {
        $rows[] = array(
            array('data' => t('No records found'), 'colspan' => 3)
        );
    }

    $help = '<div class="help">'
          . t('Below is the list of available special pages automatically generated by the Scholar module.')
          . '</div>';

    return $help . theme('table', $header, $rows);
} // }}}

function scholar_page_form(&$form_state, $id) // {{{
{
    $page = scholar_load_page($id, scholar_admin_path('page'));

    scholar_add_tab(t('list'), scholar_admin_path('page'));
    scholar_add_tab(t('edit'), scholar_admin_path('page/edit/' . $page->id));

    // wczytaj tlumaczenie tytulu strony, bedzie on uzyty w komunikacie
    // o zaktualizowaniu rekordu.
    $page->title = t($page->title);

    $form = scholar_generic_form(array(
        'title' => array(
            '#disabled' => true,
            '#description' => t('Page title was set internally and cannot be changed.'),
        ),
        'nodes',
        'files',
    ), $page);

    $form['submit'] = array(
        '#type'  => 'submit',
        '#value' => t('Save changes'),
    );
    $form['cancel'] = array(
        '#type'  => 'scholar_element_cancel',
        '#value' => scholar_admin_path('page'),
    );

    return $form;
} // }}}

function scholar_page_form_submit($form, &$form_state)
{
    if (empty($form['#record'])) {
        return;
    }

    $values = $form_state['values'];
    $record = $form['#record'];

    // jezeli wezly maja pusty tytul wstaw tytul strony odpowiedni
    // dla jezyka wezla
    foreach ($values['nodes'] as $language => &$node) {
        $title = trim($node['title']);
        if (empty($title)) {
            $title = t($record->title, array(), $language);
        }
        $node['title'] = $title;
    }
    unset($node);

    scholar_populate_record($record, $values);
    scholar_save_page($record);

    drupal_set_message(t('%title updated successfully.', array('%title' => $record->title)));
    drupal_goto(scholar_admin_path('page'));
}


// vim: fdm=marker
